---
title: "Exploratory Data Analysis with Postgres"
format: html
---

This example shows easily accessing data in Postgres with a DSN and dynamically generating SQL queries from R code.

Posit has created the [tidyverse](https://www.tidyverse.org/) which is a collection of some of the most widely used R packages for data science. The [dbplyr](https://dbplyr.tidyverse.org/) package is especially helpful for working with Postgres as it can take standard [dplyr](https://dplyr.tidyverse.org/) R code and dynamically convert to SQL pushed to Postgres.

# Setup

## Load Packages

```{r}
#| echo: false
#| message: false

library(odbc)
library(DBI)
library(dbplyr)
library(tidyverse)
library(scales)
```

## Connect to Postgres

The database password is saved as an environment variable in a `.Renviron` file so its automatically loaded into the session. Its critical this file is NOT version controlled.
This is convenient as the environment variable can be sent to Connect so the same code run there successfully.

```{r}
con <- DBI::dbConnect(odbc::odbc(),
                      Driver = "PostgreSQL",
                      Database = "demo",
                      Port = 5432,
                      Server = "demo-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com",
                      UID = "posit",
                      PWD = Sys.getenv("POSTGRES_PASS"))
```


Preview the query

```{r}
base_query <- tbl(con, in_catalog("demo", "public", "loan_data_full")) |>
      filter(!is.na(addr_state)) |>
      mutate(region = case_when(stringr::str_sub(zip_code, 1, 1) %in% c("8","9") ~ "West",
                                stringr::str_sub(zip_code, 1, 1) %in% c("6","5","4") ~ "Midwest",
                                stringr::str_sub(zip_code, 1, 1) %in% c("7","3","2") ~ "South",
                                stringr::str_sub(zip_code, 1, 1) %in% c("1","0") ~ "East",
                                TRUE ~ "NA")) |>
      select(region, grade, sub_grade, loan_amnt, funded_amnt,
             term, int_rate, emp_title, emp_length, annual_inc, loan_status,
             purpose, title, zip_code, addr_state, dti, out_prncp) |>
      mutate(office_no = stringr::str_sub(zip_code, 1, 3))
base_query
```

## View the SQL generated

```{r}
show_query(base_query)
```

## Compute basic summary statistics

Build on the existing query and collect the results

```{r}
summary_stats <- base_query |>
  group_by(region, grade) |>
  summarise(out_prncp = sum(as.numeric(out_prncp), na.rm = TRUE)) |>
  filter(region != "NA") |>
  collect()

summary_stats
```

## Graph the results


Graph showing out_prncp per grade by region using the summary_stats data


```{r}
summary_stats |>
  ggplot(aes(x = grade, y = out_prncp, fill = grade)) +
  geom_col() +
  facet_wrap(~region) +
  scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +
  labs(y = "Outstanding Principal (Millions)", x = "Loan Grade") +
  theme_minimal() +
  theme(legend.position = "none")

```
